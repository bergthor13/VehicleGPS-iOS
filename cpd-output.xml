<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
   <duplication lines="68" tokens="394">
      <file column="26" endcolumn="44" endline="86" line="19"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Parsers/VGArduinoCSVParser.swift"/>
      <file column="26" endcolumn="44" endline="86" line="19"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Parsers/VGWGPSCSVParser.swift"/>
      <codefragment><![CDATA[        if row.count < 5 {
            return false
        }
        return true
    }
    
    func fileToTrack(fileUrl: URL, progress: @escaping (UInt, UInt) -> Void, onSuccess: @escaping (VGTrack) -> Void, onFailure:@escaping(Error) -> Void) {
        var lastProgressUpdate = Date()
        
        let track = VGTrack()
        track.fileName = fileUrl.lastPathComponent
        do {
            let resources = try fileUrl.resourceValues(forKeys: [.fileSizeKey])
            if let fileSize = resources.fileSize {
                track.fileSize = fileSize
            }
        } catch let error {
            print(error)
            onFailure(error)
        }
        
        var fileData = Data()
        var fileString = String()
        
        do {
            _ = fileUrl.startAccessingSecurityScopedResource()
            fileData = try Data(contentsOf: fileUrl)
            fileString = String(data: fileData, encoding: .utf8)!
        } catch let error {
            print(error)
            fileUrl.stopAccessingSecurityScopedResource()
        }
        fileUrl.stopAccessingSecurityScopedResource()

        let csv = CSV(string: fileString, column: ";", line: "\r\n")
        
        let lineCount = csv.rows.count
        for (index, row) in csv.rows.enumerated() {
            if abs(lastProgressUpdate.timeIntervalSinceNow) > self.progress_update_delay {
                progress(UInt(index), UInt(lineCount))
                lastProgressUpdate = Date()
            }
            if !self.isValid(row: row) {
                continue
            }
            let dataPoint = self.rowToDataPoint(row: row)
            track.trackPoints.append(dataPoint)
        }
        
        track.process()
        
        let mapPoints = track.trackPoints.filter { (point) -> Bool in
            return point.hasGoodFix()
        }
        track.mapPoints = VGTrack.getFilteredPointList(list: mapPoints)
        track.name = "Track"
        onSuccess(track)
    }
    
    func rowToDataPoint(row: [String]) -> VGDataPoint {
        // TIME,LATITUDE,LONGITUDE,ELEVATION,AMBIENT_TEMPERATURE
        // 2015-07-26T21:10:00.0Z;64.04261779785156;-21.96710968017578;76.10;NULL
        
        let dataPoint = VGDataPoint()
        dataPoint.timestamp = ISO8601DateParser.parse(String(row[0]))
        dataPoint.latitude = Double(row[1])
        dataPoint.longitude = Double(row[2])
        dataPoint.elevation = Double(row[3])]]></codefragment>
   </duplication>
   <duplication lines="22" tokens="282">
      <file column="9" endcolumn="42" endline="193" line="172"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryDetailsTableViewController.swift"/>
      <file column="9" endcolumn="42" endline="718" line="697"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[        let track = getTrackAt(indexPath: indexPath)
        
        let delete = UIAction(title: Strings.delete, image: Icons.delete, identifier: .none, discoverabilityTitle: nil, attributes: .destructive, state: .off) {_ in
            self.deleteTrack(at: indexPath)
        }
        
        let exportOriginal = UIAction(title: Strings.shareCSV, image: Icons.share, identifier: .none, discoverabilityTitle: nil, attributes: .init(), state: .off) {_ in
            let activityVC = UIActivityViewController(activityItems: [self.vgFileManager!.getAbsoluteFilePathFor(track: track!)!], applicationActivities: nil)
            self.present(activityVC, animated: true, completion: nil)
        }
        
        let exportGPX = UIAction(title: Strings.shareGPX, image: Icons.share, identifier: .none, discoverabilityTitle: nil, attributes: .init(), state: .off) {_ in
            
            DispatchQueue.global(qos: .userInitiated).async {
                self.dataStore.getDataPointsForTrack(with: track!.id!, onSuccess: { (dataPoints) in
                    track!.trackPoints = dataPoints
                    let fileUrl = self.vgGPXGenerator.generateGPXFor(tracks: [track!])!
                    let activityVC = UIActivityViewController(activityItems: [fileUrl], applicationActivities: nil)
                    DispatchQueue.main.async {
                        self.present(activityVC, animated: true, completion: nil)
                    }
                }, onFailure: { (error) in]]></codefragment>
   </duplication>
   <duplication lines="46" tokens="274">
      <file column="53" endcolumn="5" endline="273" line="228"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryAllTracksDataSource.swift"/>
      <file column="27" endcolumn="5" endline="616" line="571"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[    func getViewForHeader(_ tableView: UITableView, section: Int, view: VGLogHeaderView?) -> VGLogHeaderView {
        var hdrView = view
        
        if hdrView == nil {
            hdrView = tableView.dequeueReusableHeaderFooterView(withIdentifier: VGLogHeaderView.identifier) as? VGLogHeaderView
        }
        
        guard let view = hdrView else {
            return VGLogHeaderView()
        }
        
        let day = sections[section]
        view.dateLabel.text = " "
        view.detailsLabel.text = " "

        let dateString = headerDateFormatter.sectionKeyToDateString(sectionKey: day)
        var totalDuration = 0.0
        var totalDistance = 0.0
        var distanceString = ""
        var durationString = ""
        guard let trackSection = tracksDictionary[day] else {
            return VGLogHeaderView()
        }
        for track in trackSection {
            totalDuration += track.duration
            totalDistance += track.distance
        }
        distanceString = (totalDistance*1000).asDistanceString()
        
        let formattedDuration = totalDuration.asDurationString()
        durationString = formattedDuration
        
        view.dateLabel.text = dateString
        view.detailsLabel.text = distanceString + " - " + durationString
        
        var frame1 = view.dateLabel.frame
        frame1.size.height = dateString.height(withConstrainedWidth: view.bounds.width-40, font: view.dateLabel.font)
        view.dateLabel.frame = frame1
        
        var frame2 = view.detailsLabel.frame
        frame2.origin.y = frame1.size.height+2+2
        frame2.size.height = durationString.height(withConstrainedWidth: view.bounds.width-40, font: view.detailsLabel.font)
        view.detailsLabel.frame = frame2
        
        return view
    }]]></codefragment>
   </duplication>
   <duplication lines="41" tokens="245">
      <file column="5" endcolumn="5" endline="101" line="61"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/Cells/VGAvailableLogsTableViewCell.swift"/>
      <file column="5" endcolumn="5" endline="265" line="227"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/Cells/VGLogsTableViewCell.swift"/>
      <codefragment><![CDATA[    }
    
    func styleString(unstyledString: String, substrings: [String]) -> NSAttributedString {
        let styledText = NSMutableAttributedString.init(string: unstyledString)

        for subs in substrings {
            let index = find(char: subs, in: unstyledString)

            if let index = index {
                
                setStyle(text: styledText, range: NSRange(location: index, length: subs.count))
            }
        }
        return styledText
    }
    
    func setStyle(text: NSMutableAttributedString, range: NSRange) {
        text.setAttributes([ .font: UIFont.systemFont(ofSize: 17, weight: .semibold),
                                  .foregroundColor: UIColor.secondaryLabel],
                                   range: range)

    }
    
    func find(char: String, in string: String) -> Int? {
        let range = string.range(of: char)
        guard let newRange = range else {
            return nil
        }
        let index: Int = string.distance(from: string.startIndex, to: newRange.lowerBound)
        return index
    }
    
    func fileNameToDate(dateString: String) -> Date? {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd HHmmss"
        dateFormatter.locale = Locale(identifier: "en_US_POSIX") // set locale to reliable US_POSIX
        if let date = dateFormatter.date(from: String(dateString.prefix(17))) {
            return date
        }
        return nil
    }]]></codefragment>
   </duplication>
   <duplication lines="36" tokens="198">
      <file column="5" endcolumn="5" endline="366" line="331"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryAllTracksDataSource.swift"/>
      <file column="5" endcolumn="5" endline="520" line="485"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[    }
    
    func getIndexPath(for track: VGTrack) -> IndexPath? {
        for (sectionIndex, section) in sections.enumerated() {
            guard let sectionList = tracksDictionary[section] else {
                continue
            }
            for (rowIndex, trk) in sectionList.enumerated() where track.id == trk.id {
                return IndexPath(row: rowIndex, section: sectionIndex)
            }
        }
        return nil
    }
    
    func getIndexPath(for fileName: String) -> IndexPath? {
        for (sectionIndex, section) in sections.enumerated() {
            guard let sectionList = tracksDictionary[section] else {
                continue
            }
            for (rowIndex, trk) in sectionList.enumerated() where fileName == trk.fileName {
                return IndexPath(row: rowIndex, section: sectionIndex)
            }
        }
        return nil
    }
    
    func combineLists(localList: [VGTrack], remoteList: [VGTrack]) -> [VGTrack] {
        var result = localList

        for track in remoteList {
            if !(result.contains(track)) {
                result.append(track)
            }
        }
        return result
    }]]></codefragment>
   </duplication>
   <duplication lines="25" tokens="165">
      <file column="42" endcolumn="16" endline="337" line="313"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryTableViewController.swift"/>
      <file column="31" endcolumn="16" endline="84" line="60"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[            guard let track = dataSource.getTrackAt(indexPath: indexPath) else {
                continue
            }
            tracks.append(track)
        }
        
        let dpGroup = DispatchGroup()
        for track in tracks {
            dpGroup.enter()
            DispatchQueue.global(qos: .userInitiated).async {
                self.dataStore.getDataPointsForTrack(with: track.id!, onSuccess: { (dataPoints) in
                    track.trackPoints = dataPoints
                    dpGroup.leave()
                }, onFailure: { (error) in
                    self.appDelegate.display(error: error)
                    dpGroup.leave()
                })
            }
        }
        dpGroup.wait()
        if let fileUrl = self.vgGPXGenerator.generateGPXFor(tracks: tracks) {
            let activityVC = UIActivityViewController(activityItems: [fileUrl], applicationActivities: nil)
            activityVC.popoverPresentationController?.barButtonItem = self.toolbarButtonShare
            self.present(activityVC, animated: true, completion: nil)
        } else {]]></codefragment>
   </duplication>
   <duplication lines="22" tokens="131">
      <file column="52" endcolumn="17" endline="306" line="285"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryAllTracksDataSource.swift"/>
      <file column="26" endcolumn="17" endline="260" line="238"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[        guard let cell = self.parentViewController.tableView.cellForRow(at: indexPath) as? VGLogsTableViewCell else {
            return
        }
        getTrackAt(indexPath: indexPath)?.vehicle = newTrack.vehicle
        
        cell.lblVehicle.text = vehicle.name
    }
    
    @objc func onLogsAdded(_ notification: Notification) {
        guard let newTracks = notification.object as? [VGTrack] else {
            return
        }

        DispatchQueue.main.async {
            var list = [VGTrack]()
            _ = self.tracksDictionary.map {
                for item in $1 {
                    list.append(item)
                }
            }
            (self.sections, self.tracksDictionary) = LogDateSplitter.splitLogsByDate(trackList: self.combineLists(localList: list, remoteList: newTracks))
            self.parentViewController.tableView.reloadData()]]></codefragment>
   </duplication>
   <duplication lines="14" tokens="127">
      <file column="72" endcolumn="26" endline="210" line="197"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryAllTracksDataSource.swift"/>
      <file column="45" endcolumn="26" endline="760" line="746"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[    func deleteTrack(at indexPath: IndexPath, in tableView: UITableView) {
        // Delete the row from the data source
        guard let track = self.getTrackAt(indexPath: indexPath) else {
            return
        }
        self.tracksDictionary[self.sections[indexPath.section]]?.remove(at: indexPath.row)
        tableView.deleteRows(at: [indexPath], with: .fade)

        if self.tracksDictionary[self.sections[indexPath.section]]?.count == 0 {
            self.tracksDictionary.removeValue(forKey: self.sections[indexPath.section])
            self.sections.remove(at: indexPath.section)
            tableView.deleteSections(IndexSet(integer: indexPath.section), with: .fade)
        }
        self.vgFileManager.deleteFile(for: track)]]></codefragment>
   </duplication>
   <duplication lines="14" tokens="122">
      <file column="9" endcolumn="5" endline="273" line="260"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryAllTracksDataSource.swift"/>
      <file column="9" endcolumn="5" endline="308" line="295"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryDetailsTableViewController.swift"/>
      <file column="9" endcolumn="5" endline="616" line="603"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[        view.dateLabel.text = dateString
        view.detailsLabel.text = distanceString + " - " + durationString
        
        var frame1 = view.dateLabel.frame
        frame1.size.height = dateString.height(withConstrainedWidth: view.bounds.width-40, font: view.dateLabel.font)
        view.dateLabel.frame = frame1
        
        var frame2 = view.detailsLabel.frame
        frame2.origin.y = frame1.size.height+2+2
        frame2.size.height = durationString.height(withConstrainedWidth: view.bounds.width-40, font: view.detailsLabel.font)
        view.detailsLabel.frame = frame2
        
        return view
    }]]></codefragment>
   </duplication>
   <duplication lines="12" tokens="120">
      <file column="88" endcolumn="41" endline="210" line="199"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryDetailsTableViewController.swift"/>
      <file column="78" endcolumn="41" endline="742" line="731"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[        let selectVehicle = UIAction(title: Strings.selectVehicle, image: Icons.vehicle, identifier: .none, discoverabilityTitle: nil, attributes: .init(), state: .off) {_ in
            guard let cell = tableView.cellForRow(at: indexPath) as? VGLogsTableViewCell else {
                return
            }
            self.didTapVehicle(track: track!, tappedView: cell.btnVehicle)
        }
        
        let exportMenu = UIMenu(title: Strings.share, image: Icons.share, identifier: .none, options: .init(), children: [exportGPX, exportOriginal])
        
        return UIContextMenuConfiguration(identifier: nil,
                                          previewProvider: nil) { _ in
            UIMenu(title: "", children: [selectVehicle, exportMenu, delete])]]></codefragment>
   </duplication>
   <duplication lines="20" tokens="118">
      <file column="32" endcolumn="24" endline="75" line="56"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Parsers/VGArduinoCSVParser.swift"/>
      <file column="33" endcolumn="24" endline="68" line="49"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Parsers/VGCSVParser.swift"/>
      <file column="32" endcolumn="24" endline="75" line="56"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Parsers/VGWGPSCSVParser.swift"/>
      <codefragment><![CDATA[        for (index, row) in csv.rows.enumerated() {
            if abs(lastProgressUpdate.timeIntervalSinceNow) > self.progress_update_delay {
                progress(UInt(index), UInt(lineCount))
                lastProgressUpdate = Date()
            }
            if !self.isValid(row: row) {
                continue
            }
            let dataPoint = self.rowToDataPoint(row: row)
            track.trackPoints.append(dataPoint)
        }
        
        track.process()
        
        let mapPoints = track.trackPoints.filter { (point) -> Bool in
            return point.hasGoodFix()
        }
        track.mapPoints = VGTrack.getFilteredPointList(list: mapPoints)
        track.name = "Track"
        onSuccess(track)]]></codefragment>
   </duplication>
   <duplication lines="13" tokens="114">
      <file column="5" endcolumn="40" endline="85" line="73"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Parsers/VGCSVParser.swift"/>
      <file column="14" endcolumn="40" endline="34" line="22"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Parsers/VGShortCSVParser.swift"/>
      <codefragment><![CDATA[    func rowToDataPoint(row: [String]) -> VGDataPoint {
        // TIME,LATITUDE,LONGITUDE,ELEVATION,SATELLITES,HORIZONTAL_ACCURACY,VERTICAL_ACCURACY,PDOP,FIX_TYPE,GNSS_FIX_OK,FULLY_RESOLVED,RPM,ENGINE_LOAD,COOLANT_TEMPERATURE,AMBIENT_TEMPERATURE,THROTTLE_POSITION
        // 2019-04-24T17:46:17.599829,63.995643,-22.634326,41.482,7,0.994,1.484,3.48,3,True,False,1103.5,34.509803921568626,14,5,14.509803921568627
        
        let dataPoint = VGDataPoint()
        dataPoint.timestamp = ISO8601DateParser.parse(String(row[0]))
        dataPoint.latitude = Double(row[1])
        dataPoint.longitude = Double(row[2])
        dataPoint.elevation = Double(row[3])
        dataPoint.satellites = Int(row[4])
        dataPoint.horizontalAccuracy = Double(row[5])!
        dataPoint.verticalAccuracy = Double(row[6])!
        dataPoint.pdop = Double(row[7])!]]></codefragment>
   </duplication>
   <duplication lines="16" tokens="105">
      <file column="5" endcolumn="11" endline="40" line="25"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Parsers/VGArduinoCSVParser.swift"/>
      <file column="5" endcolumn="11" endline="34" line="18"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Parsers/VGCSVParser.swift"/>
      <file column="5" endcolumn="11" endline="40" line="25"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Parsers/VGWGPSCSVParser.swift"/>
      <codefragment><![CDATA[    func fileToTrack(fileUrl: URL, progress: @escaping (UInt, UInt) -> Void, onSuccess: @escaping (VGTrack) -> Void, onFailure:@escaping(Error) -> Void) {
        var lastProgressUpdate = Date()
        
        let track = VGTrack()
        track.fileName = fileUrl.lastPathComponent
        do {
            let resources = try fileUrl.resourceValues(forKeys: [.fileSizeKey])
            if let fileSize = resources.fileSize {
                track.fileSize = fileSize
            }
        } catch let error {
            print(error)
            onFailure(error)
        }
        
        var fileData = Data()]]></codefragment>
   </duplication>
   <duplication lines="23" tokens="105">
      <file column="5" endcolumn="32" endline="285" line="263"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryDetailsTableViewController.swift"/>
      <file column="5" endcolumn="32" endline="591" line="569"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[    }
    
    func getViewForHeader(section: Int, view: VGLogHeaderView?) -> VGLogHeaderView {
        var hdrView = view
        
        if hdrView == nil {
            hdrView = tableView.dequeueReusableHeaderFooterView(withIdentifier: VGLogHeaderView.identifier) as? VGLogHeaderView
        }
        
        guard let view = hdrView else {
            return VGLogHeaderView()
        }
        
        let day = sections[section]
        view.dateLabel.text = " "
        view.detailsLabel.text = " "

        let dateString = headerDateFormatter.sectionKeyToDateString(sectionKey: day)
        var totalDuration = 0.0
        var totalDistance = 0.0
        var distanceString = ""
        var durationString = ""
        guard let trackSection = logDict[day] else {]]></codefragment>
   </duplication>
   <duplication lines="21" tokens="101">
      <file column="53" endcolumn="32" endline="248" line="228"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryAllTracksDataSource.swift"/>
      <file column="27" endcolumn="32" endline="285" line="265"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryDetailsTableViewController.swift"/>
      <codefragment><![CDATA[    func getViewForHeader(_ tableView: UITableView, section: Int, view: VGLogHeaderView?) -> VGLogHeaderView {
        var hdrView = view
        
        if hdrView == nil {
            hdrView = tableView.dequeueReusableHeaderFooterView(withIdentifier: VGLogHeaderView.identifier) as? VGLogHeaderView
        }
        
        guard let view = hdrView else {
            return VGLogHeaderView()
        }
        
        let day = sections[section]
        view.dateLabel.text = " "
        view.detailsLabel.text = " "

        let dateString = headerDateFormatter.sectionKeyToDateString(sectionKey: day)
        var totalDuration = 0.0
        var totalDistance = 0.0
        var distanceString = ""
        var durationString = ""
        guard let trackSection = tracksDictionary[day] else {]]></codefragment>
   </duplication>
   <duplication lines="13" tokens="97">
      <file column="5" endcolumn="8" endline="51" line="39"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryAllTracksDataSource.swift"/>
      <file column="5" endcolumn="8" endline="370" line="358"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[    }
    
    func addObservers() {
        addObserver(selector: #selector(onVehicleAddedToLog(_:)), name: .vehicleAddedToTrack)
        addObserver(selector: #selector(onLogsAdded(_:)), name: .logsAdded)
        addObserver(selector: #selector(onLogUpdated(_:)), name: .logUpdated)
    }
    
    func addObserver(selector: Selector, name: Notification.Name) {
        NotificationCenter.default.addObserver(self, selector: selector, name: name, object: nil)
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {]]></codefragment>
   </duplication>
   <duplication lines="23" tokens="91">
      <file column="25" endcolumn="21" endline="165" line="143"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Snapshots/VGSnapshotMaker.swift"/>
      <file column="21" endcolumn="17" endline="231" line="209"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Snapshots/VGSnapshotMaker.swift"/>
      <codefragment><![CDATA[                        let points = coordinateList.map { coordinate in
                            snapshot.point(for: coordinate)
                        }
                        
                        // Go to the first point in the Bezier Path.
                        let path = UIBezierPath()
                        path.move(to: points[0])
                        
                        // Create a path from the first CGPoint to the last.
                        for point in points.dropFirst() {
                            path.addLine(to: point)
                        }
                        
                        // Create a line with the Bezier Path.
                        path.lineWidth = 3
                        if let mapColor = vgTrack.vehicle?.mapColor {
                            mapColor.setStroke()
                        } else {
                            UIColor.red.setStroke()
                        }
                        
                        path.stroke()
                    }]]></codefragment>
   </duplication>
   <duplication lines="14" tokens="87">
      <file column="47" endcolumn="18" endline="761" line="748"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/VGDataStore.swift"/>
      <file column="52" endcolumn="18" endline="793" line="780"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/VGDataStore.swift"/>
      <codefragment><![CDATA[    func add(tagWith tagId: UUID, toTrackWith trackId: UUID, onSuccess: @escaping() -> Void, onFailure: @escaping(Error) -> Void) {
        let context = NSManagedObjectContext(concurrencyType: .privateQueueConcurrencyType)
        context.persistentStoreCoordinator = self.storeCoordinator
        context.perform {
            // Get the track in question
            guard let tag = self.getTag(in: context, with: tagId) else {
                return
            }
            
            guard let track = self.getTrack(in: context, with: trackId) else {
                return
            }
            
            track.addToTags(tag)]]></codefragment>
   </duplication>
   <duplication lines="13" tokens="87">
      <file column="50" endcolumn="13" endline="169" line="157"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryAllTracksDataSource.swift"/>
      <file column="29" endcolumn="13" endline="202" line="191"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryDetailsTableViewController.swift"/>
      <codefragment><![CDATA[                        self.parentViewController.present(activityVC, animated: true, completion: nil)

                    }
                }, onFailure: { (error) in
                    //self.parentViewController.display(error: error)
                })
            }
        }
        
        let selectVehicle = UIAction(title: Strings.selectVehicle, image: Icons.vehicle, identifier: .none, discoverabilityTitle: nil, attributes: .init(), state: .off) {_ in
            guard let cell = tableView.cellForRow(at: indexPath) as? VGLogsTableViewCell else {
                return
            }]]></codefragment>
   </duplication>
   <duplication lines="23" tokens="81">
      <file column="5" endcolumn="15" endline="113" line="91"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryAllTracksDataSource.swift"/>
      <file column="14" endcolumn="15" endline="671" line="649"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard let track = getTrackAt(indexPath: indexPath) else {
            return
        }
        
//        if let appDelegate = UIApplication.shared.delegate as? AppDelegate {
//            appDelegate.trackDetailsViewController.track = track
//            return
//        }
        
        if tableView.isEditing {
            guard let selectedIndexPaths = tableView.indexPathsForSelectedRows else {
                return
            }
            
            if selectedIndexPaths.count == 0 {
                self.hideEditToolbar()
            } else {
                self.showEditToolbar()
            }
        } else {
            tableView.deselectRow(at: indexPath, animated: true)
            let pulleyEditor = PulleyEditorViewController()]]></codefragment>
   </duplication>
   <duplication lines="12" tokens="81">
      <file column="17" endcolumn="11" endline="206" line="195"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryDetailsTableViewController.swift"/>
      <file column="17" endcolumn="11" endline="731" line="720"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[                })
            }
        }
        
        let selectVehicle = UIAction(title: Strings.selectVehicle, image: Icons.vehicle, identifier: .none, discoverabilityTitle: nil, attributes: .init(), state: .off) {_ in
            guard let cell = tableView.cellForRow(at: indexPath) as? VGLogsTableViewCell else {
                return
            }
            self.didTapVehicle(track: track!, tappedView: cell.btnVehicle)
        }
        
        let exportMenu = UIMenu(title: Strings.share, image: Icons.share, identifier: .none, options: .init(), children: [exportGPX, exportOriginal])]]></codefragment>
   </duplication>
   <duplication lines="20" tokens="80">
      <file column="80" endcolumn="13" endline="553" line="534"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/VGDataStore.swift"/>
      <file column="72" endcolumn="13" endline="748" line="729"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/VGDataStore.swift"/>
      <codefragment><![CDATA[            let fetchRequest = Vehicle.fetchRequest() as NSFetchRequest<Vehicle>
            fetchRequest.predicate = self.getPredicate(for: id)
            do {
                let test = try context.fetch(fetchRequest)
                if test.count > 0 {
                    context.delete(test[0])
                    try context.save()
                    DispatchQueue.main.async {
                        onSuccess()
                    }
                }
            } catch let error {
                DispatchQueue.main.async {
                    onFailure(error)
                }
            }
        }
    }
    
    func add(vehicleWith vehicleId: UUID, toTrackWith trackId: UUID, onSuccess: @escaping() -> Void, onFailure:@escaping(Error) -> Void) {]]></codefragment>
   </duplication>
   <duplication lines="7" tokens="76">
      <file column="38" endcolumn="64" endline="152" line="146"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryAllTracksDataSource.swift"/>
      <file column="17" endcolumn="64" endline="186" line="180"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryDetailsTableViewController.swift"/>
      <file column="17" endcolumn="64" endline="711" line="705"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[            self.parentViewController.present(activityVC, animated: true, completion: nil)
        }
        
        let exportGPX = UIAction(title: Strings.shareGPX, image: Icons.share, identifier: .none, discoverabilityTitle: nil, attributes: .init(), state: .off) {_ in
            
            DispatchQueue.global(qos: .userInitiated).async {
                self.dataStore.getDataPointsForTrack(with: track.id!, onSuccess: { (dataPoints) in]]></codefragment>
   </duplication>
   <duplication lines="11" tokens="74">
      <file column="39" endcolumn="39" endline="379" line="369"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryAllTracksDataSource.swift"/>
      <file column="46" endcolumn="39" endline="321" line="311"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryDetailsTableViewController.swift"/>
      <codefragment><![CDATA[extension VGHistoryAllTracksDataSource: DisplaySelectVehicleProtocol {
    func didTapVehicle(track: VGTrack, tappedView: UIView?) {
        let selectionVC = VGVehiclesSelectionTableViewController(style: .insetGrouped)
        selectionVC.track = track
        
        let navController = UINavigationController(rootViewController: selectionVC)
        navController.modalPresentationStyle = .popover
        navController.preferredContentSize = CGSize(width: 414, height: 600)
        
        let popover: UIPopoverPresentationController = navController.popoverPresentationController!
        popover.sourceView = tappedView]]></codefragment>
   </duplication>
   <duplication lines="1" tokens="74">
      <file column="34" endcolumn="294" endline="215" line="215"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/Entities/TrackGraphView.swift"/>
      <file column="47" endcolumn="307" endline="280" line="280"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/Entities/TrackGraphView.swift"/>
      <codefragment><![CDATA[        self.scrollView.frame =  CGRect(x: self.bounds.origin.x+configuration.inset.left, y: self.bounds.origin.y+configuration.inset.top, width: self.bounds.width-configuration.inset.left-configuration.inset.right, height: self.bounds.height-configuration.inset.top-configuration.inset.bottom)]]></codefragment>
   </duplication>
   <duplication lines="13" tokens="74">
      <file column="58" endcolumn="29" endline="179" line="167"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <file column="55" endcolumn="29" endline="197" line="184"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[                                    self.dataStore.update(file: downlFile, onSuccess: {
                                        parseProgress[index] = 1
                                        group2.leave()
                                    }, onFailure: { (error) in
                                        parseProgress[index] = 1
                                        group2.leave()
                                    })
                                }, onFailure: { (error) in
                                    parseProgress[index] = 1
                                    self.appDelegate.display(error: error)
                                    group2.leave()
                                })
                            } else {]]></codefragment>
   </duplication>
   <duplication lines="13" tokens="73">
      <file column="53" endcolumn="35" endline="347" line="335"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryAllTracksDataSource.swift"/>
      <file column="44" endcolumn="35" endline="88" line="76"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryDetailsTableViewController.swift"/>
      <file column="53" endcolumn="35" endline="501" line="489"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[            guard let sectionList = tracksDictionary[section] else {
                continue
            }
            for (rowIndex, trk) in sectionList.enumerated() where track.id == trk.id {
                return IndexPath(row: rowIndex, section: sectionIndex)
            }
        }
        return nil
    }
    
    func getIndexPath(for fileName: String) -> IndexPath? {
        for (sectionIndex, section) in sections.enumerated() {
            guard let sectionList = tracksDictionary[section] else {]]></codefragment>
   </duplication>
   <duplication lines="14" tokens="72">
      <file column="5" endcolumn="5" endline="79" line="66"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryAllTracksDataSource.swift"/>
      <file column="14" endcolumn="5" endline="647" line="634"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(
            withIdentifier: VGLogsTableViewCell.identifier,
            for: indexPath
            ) as? VGLogsTableViewCell else {
            return UITableViewCell()
        }
        cell.delegate = self
        if let track = getTrackAt(indexPath: indexPath) {
            cell.show(track: track)
        }
        
        return cell
    }]]></codefragment>
   </duplication>
   <duplication lines="13" tokens="72">
      <file column="65" endcolumn="1" endline="383" line="371"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryAllTracksDataSource.swift"/>
      <file column="52" endcolumn="1" endline="399" line="387"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryAllTracksDataSource.swift"/>
      <codefragment><![CDATA[        let selectionVC = VGVehiclesSelectionTableViewController(style: .insetGrouped)
        selectionVC.track = track
        
        let navController = UINavigationController(rootViewController: selectionVC)
        navController.modalPresentationStyle = .popover
        navController.preferredContentSize = CGSize(width: 414, height: 600)
        
        let popover: UIPopoverPresentationController = navController.popoverPresentationController!
        popover.sourceView = tappedView

        self.parentViewController.present(navController, animated: true, completion: nil)
    }
}]]></codefragment>
   </duplication>
   <duplication lines="13" tokens="72">
      <file column="9" endcolumn="1" endline="325" line="313"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryDetailsTableViewController.swift"/>
      <file column="9" endcolumn="1" endline="795" line="783"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[        let selectionVC = VGVehiclesSelectionTableViewController(style: .insetGrouped)
        selectionVC.track = track
        
        let navController = UINavigationController(rootViewController: selectionVC)
        navController.modalPresentationStyle = .popover
        navController.preferredContentSize = CGSize(width: 414, height: 600)
        
        let popover: UIPopoverPresentationController = navController.popoverPresentationController!
        popover.sourceView = tappedView

        present(navController, animated: true, completion: nil)
    }
}]]></codefragment>
   </duplication>
   <duplication lines="14" tokens="72">
      <file column="17" endcolumn="42" endline="496" line="483"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryTableViewController.swift"/>
      <file column="17" endcolumn="42" endline="542" line="529"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryTableViewController.swift"/>
      <codefragment><![CDATA[                if let date = date {
                    section!.dateDescription = dateFormatter.string(from: date)
                }

                result.append(section!)
            }
            
            var summary = section?.summaries.filter({ (summ) -> Bool in
                return summ.summaryID == summaryKey
                }).first
            
            if summary == nil {
                summary = VGTracksSummary(title: summaryKey)
                dateFormatter.dateFormat = "yyyy-MM"]]></codefragment>
   </duplication>
   <duplication lines="12" tokens="72">
      <file column="68" endcolumn="33" endline="134" line="123"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <file column="53" endcolumn="33" endline="145" line="134"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[                        guard let fileManager = self.vgFileManager else {
                            let downlFile = VGDownloadedFile(name: file.filename, size: file.fileSize as? Int)
                            self.dataStore.add(file: downlFile, onSuccess: {
                                parseProgress[index] = 1
                                group2.leave()
                            }, onFailure: { (error) in
                                parseProgress[index] = 1
                                group2.leave()
                            })
                            return
                        }
                        guard let fileUrl = fileUrl else {]]></codefragment>
   </duplication>
   <duplication lines="12" tokens="70">
      <file column="5" endcolumn="18" endline="87" line="76"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Parsers/VGArduinoCSVParser.swift"/>
      <file column="5" endcolumn="18" endline="82" line="71"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Parsers/VGCSVParser.swift"/>
      <codefragment><![CDATA[    }
    
    func rowToDataPoint(row: [String]) -> VGDataPoint {
        // TIME,LATITUDE,LONGITUDE,ELEVATION,AMBIENT_TEMPERATURE
        // 2015-07-26T21:10:00.0Z;64.04261779785156;-21.96710968017578;76.10;NULL
        
        let dataPoint = VGDataPoint()
        dataPoint.timestamp = ISO8601DateParser.parse(String(row[0]))
        dataPoint.latitude = Double(row[1])
        dataPoint.longitude = Double(row[2])
        dataPoint.elevation = Double(row[3])
        dataPoint.ambientTemperature = Double(row[4])]]></codefragment>
   </duplication>
   <duplication lines="12" tokens="70">
      <file column="9" endcolumn="73" endline="380" line="369"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/Entities/TrackGraphView.swift"/>
      <file column="13" endcolumn="77" endline="426" line="415"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/Entities/TrackGraphView.swift"/>
      <codefragment><![CDATA[        if self.maxValue == self.minValue {
            if CGFloat(graphPoint) > self.maxValue {
                return self.graphFrame.frame.height
            }
            
            if CGFloat(graphPoint) < self.maxValue {
                return 0
            }
            return self.graphFrame.frame.height/2
        }
        
        var y: CGFloat = (CGFloat(graphPoint) - self.minValue) * CGFloat(self.graphFrame.frame.height) / CGFloat(self.maxValue - self.minValue)]]></codefragment>
   </duplication>
   <duplication lines="11" tokens="70">
      <file column="68" endcolumn="25" endline="133" line="123"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <file column="53" endcolumn="25" endline="144" line="134"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <file column="80" endcolumn="25" endline="155" line="145"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[                        guard let fileManager = self.vgFileManager else {
                            let downlFile = VGDownloadedFile(name: file.filename, size: file.fileSize as? Int)
                            self.dataStore.add(file: downlFile, onSuccess: {
                                parseProgress[index] = 1
                                group2.leave()
                            }, onFailure: { (error) in
                                parseProgress[index] = 1
                                group2.leave()
                            })
                            return
                        }]]></codefragment>
   </duplication>
   <duplication lines="10" tokens="69">
      <file column="5" endcolumn="18" endline="87" line="78"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Parsers/VGArduinoCSVParser.swift"/>
      <file column="14" endcolumn="18" endline="31" line="22"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Parsers/VGShortCSVParser.swift"/>
      <codefragment><![CDATA[    func rowToDataPoint(row: [String]) -> VGDataPoint {
        // TIME,LATITUDE,LONGITUDE,ELEVATION,AMBIENT_TEMPERATURE
        // 2015-07-26T21:10:00.0Z;64.04261779785156;-21.96710968017578;76.10;NULL
        
        let dataPoint = VGDataPoint()
        dataPoint.timestamp = ISO8601DateParser.parse(String(row[0]))
        dataPoint.latitude = Double(row[1])
        dataPoint.longitude = Double(row[2])
        dataPoint.elevation = Double(row[3])
        dataPoint.ambientTemperature = Double(row[4])]]></codefragment>
   </duplication>
   <duplication lines="11" tokens="68">
      <file column="5" endcolumn="44" endline="81" line="71"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Parsers/VGCSVParser.swift"/>
      <file column="5" endcolumn="44" endline="86" line="76"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Parsers/VGWGPSCSVParser.swift"/>
      <codefragment><![CDATA[    }
    
    func rowToDataPoint(row: [String]) -> VGDataPoint {
        // TIME,LATITUDE,LONGITUDE,ELEVATION,SATELLITES,HORIZONTAL_ACCURACY,VERTICAL_ACCURACY,PDOP,FIX_TYPE,GNSS_FIX_OK,FULLY_RESOLVED,RPM,ENGINE_LOAD,COOLANT_TEMPERATURE,AMBIENT_TEMPERATURE,THROTTLE_POSITION
        // 2019-04-24T17:46:17.599829,63.995643,-22.634326,41.482,7,0.994,1.484,3.48,3,True,False,1103.5,34.509803921568626,14,5,14.509803921568627
        
        let dataPoint = VGDataPoint()
        dataPoint.timestamp = ISO8601DateParser.parse(String(row[0]))
        dataPoint.latitude = Double(row[1])
        dataPoint.longitude = Double(row[2])
        dataPoint.elevation = Double(row[3])]]></codefragment>
   </duplication>
   <duplication lines="9" tokens="67">
      <file column="14" endcolumn="44" endline="30" line="22"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Parsers/VGShortCSVParser.swift"/>
      <file column="5" endcolumn="44" endline="86" line="78"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Parsers/VGWGPSCSVParser.swift"/>
      <codefragment><![CDATA[    override func rowToDataPoint(row: [String]) -> VGDataPoint {
        // TIME,LATITUDE,LONGITUDE,ELEVATION,SATELLITES,HORIZONTAL_ACCURACY,VERTICAL_ACCURACY,PDOP,GNSS_FIX_OK,FULLY_RESOLVED,RPM,ENGINE_LOAD,COOLANT_TEMPERATURE,AMBIENT_TEMPERATURE,THROTTLE_POSITION
        // 2019-04-24T17:46:17.599829,63.995643,-22.634326,41.482,7,0.994,1.484,3.48,True,False,1103.5,34.509803921568626,14,5,14.509803921568627

        let dataPoint = VGDataPoint()
        dataPoint.timestamp = ISO8601DateParser.parse(String(row[0]))
        dataPoint.latitude = Double(row[1])
        dataPoint.longitude = Double(row[2])
        dataPoint.elevation = Double(row[3])]]></codefragment>
   </duplication>
   <duplication lines="12" tokens="66">
      <file column="55" endcolumn="5" endline="331" line="320"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryAllTracksDataSource.swift"/>
      <file column="34" endcolumn="5" endline="293" line="282"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[            guard let cell = self.parentViewController.tableView.cellForRow(at: indexPath) as? VGLogsTableViewCell else {
                return
            }
            
            if self.tracksDictionary[self.sections[indexPath.section]] == nil {
                return
            }
            
            self.tracksDictionary[self.sections[indexPath.section]]![indexPath.row] = updatedTrack
            cell.show(track: updatedTrack)
        }
    }]]></codefragment>
   </duplication>
   <duplication lines="8" tokens="66">
      <file column="29" endcolumn="30" endline="131" line="124"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <file column="29" endcolumn="30" endline="142" line="135"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <file column="29" endcolumn="30" endline="153" line="146"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <file column="37" endcolumn="38" endline="190" line="183"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[                            let downlFile = VGDownloadedFile(name: file.filename, size: file.fileSize as? Int)
                            self.dataStore.add(file: downlFile, onSuccess: {
                                parseProgress[index] = 1
                                group2.leave()
                            }, onFailure: { (error) in
                                parseProgress[index] = 1
                                group2.leave()
                            })]]></codefragment>
   </duplication>
   <duplication lines="14" tokens="65">
      <file column="9" endcolumn="53" endline="167" line="154"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryDetailsTableViewController.swift"/>
      <file column="9" endcolumn="53" endline="649" line="635"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[        guard let cell = tableView.dequeueReusableCell(
            withIdentifier: VGLogsTableViewCell.identifier,
            for: indexPath
            ) as? VGLogsTableViewCell else {
            return UITableViewCell()
        }
        cell.delegate = self
        if let track = getTrackAt(indexPath: indexPath) {
            cell.show(track: track)
        }
        return cell
    }

    override func tableView(_ tableView: UITableView, contextMenuConfigurationForRowAt indexPath: IndexPath, point: CGPoint) -> UIContextMenuConfiguration? {]]></codefragment>
   </duplication>
   <duplication lines="10" tokens="65">
      <file column="102" endcolumn="21" endline="114" line="105"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Settings/VGDatabaseTableViewController.swift"/>
      <file column="86" endcolumn="25" endline="143" line="134"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Settings/VGDatabaseTableViewController.swift"/>
      <codefragment><![CDATA[                message: "Ertu viss um að þú viljir eyða öllum \(dataTypes[indexPath.row]) hlutunum?",
                preferredStyle: .actionSheet
            )
            
            alert.addAction(UIAlertAction(title: Strings.delete, style: .destructive, handler: { (_) in
                
                let hud = MBProgressHUD.showAdded(to: self.parent!.view, animated: true)
                hud.mode = .indeterminate
                hud.label.text = "Deleting..."
                self.dataStore.deleteAllData(]]></codefragment>
   </duplication>
   <duplication lines="8" tokens="64">
      <file column="17" endcolumn="13" endline="169" line="162"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryAllTracksDataSource.swift"/>
      <file column="17" endcolumn="13" endline="727" line="720"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[                })
            }
        }
        
        let selectVehicle = UIAction(title: Strings.selectVehicle, image: Icons.vehicle, identifier: .none, discoverabilityTitle: nil, attributes: .init(), state: .off) {_ in
            guard let cell = tableView.cellForRow(at: indexPath) as? VGLogsTableViewCell else {
                return
            }]]></codefragment>
   </duplication>
   <duplication lines="7" tokens="63">
      <file column="9" endcolumn="17" endline="179" line="173"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryAllTracksDataSource.swift"/>
      <file column="9" endcolumn="17" endline="735" line="729"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[        }
        
        let selectTags = UIAction(title: Strings.selectTags, image: Icons.tag, identifier: .none, discoverabilityTitle: nil, attributes: .init(), state: .off) {_ in
            guard let cell = tableView.cellForRow(at: indexPath) as? VGLogsTableViewCell else {
                return
            }
            self.didTapTags(track: track, tappedView: cell.btnVehicle)]]></codefragment>
   </duplication>
   <duplication lines="13" tokens="61">
      <file column="5" endcolumn="1" endline="60" line="48"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/VGImportTableViewCell.swift"/>
      <file column="5" endcolumn="1" endline="266" line="255"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/Cells/VGLogsTableViewCell.swift"/>
      <codefragment><![CDATA[    }
    
    func fileNameToDate(dateString: String) -> Date? {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd HHmmss"
        dateFormatter.locale = Locale(identifier: "en_US_POSIX") // set locale to reliable US_POSIX
        if let date = dateFormatter.date(from: String(dateString.prefix(17))) {
            return date
        }
        return nil
    }

}]]></codefragment>
   </duplication>
   <duplication lines="15" tokens="61">
      <file column="17" endcolumn="8" endline="467" line="453"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryTableViewController.swift"/>
      <file column="17" endcolumn="8" endline="513" line="499"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryTableViewController.swift"/>
      <file column="17" endcolumn="8" endline="559" line="545"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryTableViewController.swift"/>
      <codefragment><![CDATA[                if let date = date {
                    summary!.dateDescription = dateFormatter.string(from: date)
                }
                
                section?.summaries.append(summary!)
            }
            
            summary!.distance   += track.distance
            summary!.trackCount += 1
            summary?.tracks.append(track)
        }
        return result
    }
    
    func getMonthDictionary(tracks: [VGTrack]) -> [VGHistorySection] {]]></codefragment>
   </duplication>
   <duplication lines="8" tokens="61">
      <file column="88" endcolumn="11" endline="731" line="724"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <file column="78" endcolumn="11" endline="738" line="731"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[        let selectVehicle = UIAction(title: Strings.selectVehicle, image: Icons.vehicle, identifier: .none, discoverabilityTitle: nil, attributes: .init(), state: .off) {_ in
            guard let cell = tableView.cellForRow(at: indexPath) as? VGLogsTableViewCell else {
                return
            }
            self.didTapVehicle(track: track!, tappedView: cell.btnVehicle)
        }
        
        let selectTags = UIAction(title: Strings.selectTags, image: Icons.tag, identifier: .none, discoverabilityTitle: nil, attributes: .init(), state: .off) {_ in]]></codefragment>
   </duplication>
   <duplication lines="11" tokens="60">
      <file column="5" endcolumn="5" endline="58" line="48"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/VGImportTableViewCell.swift"/>
      <file column="5" endcolumn="5" endline="101" line="91"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/Cells/VGAvailableLogsTableViewCell.swift"/>
      <codefragment><![CDATA[    }
    
    func fileNameToDate(dateString: String) -> Date? {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd HHmmss"
        dateFormatter.locale = Locale(identifier: "en_US_POSIX") // set locale to reliable US_POSIX
        if let date = dateFormatter.date(from: String(dateString.prefix(17))) {
            return date
        }
        return nil
    }]]></codefragment>
   </duplication>
   <duplication lines="6" tokens="59">
      <file column="27" endcolumn="36" endline="706" line="701"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/VGDataStore.swift"/>
      <file column="33" endcolumn="36" endline="730" line="725"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/VGDataStore.swift"/>
      <codefragment><![CDATA[    func update(tag: VGTag, onSuccess: @escaping() -> Void, onFailure: @escaping(Error) -> Void) {
        let context = NSManagedObjectContext(concurrencyType: .privateQueueConcurrencyType)
        context.persistentStoreCoordinator = self.storeCoordinator
        context.perform {
            let fetchRequest = Tag.fetchRequest() as NSFetchRequest<Tag>
            fetchRequest.predicate = NSPredicate(format: "name = %@", tag.name!)]]></codefragment>
   </duplication>
   <duplication lines="10" tokens="58">
      <file column="78" endcolumn="1" endline="36" line="27"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Generators/VGCoolantTemperatureGraphGenerator.swift"/>
      <file column="62" endcolumn="1" endline="36" line="27"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Generators/VGHeartRateGraphGenerator.swift"/>
      <codefragment><![CDATA[            configuration.numbersList.append((time, Double(coolantTemperature)))
        }
        configuration.color = UIColor(red: 165/255.0, green: 50/255.0, blue: 45/255.0, alpha: 0.3)
        configuration.startTime = track.timeStart
        configuration.endTime = track.timeStart?.addingTimeInterval(track.duration)

        return configuration

    }
}]]></codefragment>
   </duplication>
   <duplication lines="9" tokens="58">
      <file column="9" endcolumn="39" endline="379" line="371"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryAllTracksDataSource.swift"/>
      <file column="9" endcolumn="39" endline="791" line="783"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[        let selectionVC = VGVehiclesSelectionTableViewController(style: .insetGrouped)
        selectionVC.track = track
        
        let navController = UINavigationController(rootViewController: selectionVC)
        navController.modalPresentationStyle = .popover
        navController.preferredContentSize = CGSize(width: 414, height: 600)
        
        let popover: UIPopoverPresentationController = navController.popoverPresentationController!
        popover.sourceView = tappedView]]></codefragment>
   </duplication>
   <duplication lines="9" tokens="58">
      <file column="36" endcolumn="23" endline="26" line="18"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Vehicles/VGEditVehicleTableViewController.swift"/>
      <file column="31" endcolumn="27" endline="137" line="129"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Vehicles/VGNewVehicleTableViewController.swift"/>
      <codefragment><![CDATA[    @objc override func tappedSave() {
        if self.vehicle.mapColor == nil {
            self.vehicle.mapColor = UIColor.red
        }
        
        self.vehicle.name = self.cell.txtName.text
        self.vehicle.id = self.vehicle.id
        self.vehicle.image = self.selectedImage
        self.dataStore.update(vgVehicle: self.vehicle, onSuccess: {]]></codefragment>
   </duplication>
   <duplication lines="13" tokens="56">
      <file column="9" endcolumn="5" endline="79" line="67"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryAllTracksDataSource.swift"/>
      <file column="9" endcolumn="5" endline="165" line="154"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryDetailsTableViewController.swift"/>
      <codefragment><![CDATA[        guard let cell = tableView.dequeueReusableCell(
            withIdentifier: VGLogsTableViewCell.identifier,
            for: indexPath
            ) as? VGLogsTableViewCell else {
            return UITableViewCell()
        }
        cell.delegate = self
        if let track = getTrackAt(indexPath: indexPath) {
            cell.show(track: track)
        }
        
        return cell
    }]]></codefragment>
   </duplication>
   <duplication lines="13" tokens="56">
      <file column="5" endcolumn="9" endline="159" line="147"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryDetailsTableViewController.swift"/>
      <file column="5" endcolumn="9" endline="28" line="16"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Vehicles/VGVehicleDetailsTableViewController.swift"/>
      <codefragment><![CDATA[    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        if indexPath.section == 0 {
            return mapCell
        }
        guard let cell = tableView.dequeueReusableCell(
            withIdentifier: VGLogsTableViewCell.identifier,
            for: indexPath
            ) as? VGLogsTableViewCell else {
            return UITableViewCell()
        }]]></codefragment>
   </duplication>
   <duplication lines="13" tokens="55">
      <file column="5" endcolumn="24" endline="285" line="273"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryAllTracksDataSource.swift"/>
      <file column="5" endcolumn="24" endline="238" line="224"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[    }
    
    @objc func onVehicleAddedToLog(_ notification: Notification) {
        guard let newTrack = notification.object as? VGTrack else {
            return
        }
        guard let vehicle = newTrack.vehicle else {
            return
        }
        guard let indexPath = getIndexPath(for: newTrack) else {
            return
        }
        guard let cell = self.parentViewController.tableView.cellForRow(at: indexPath) as? VGLogsTableViewCell else {]]></codefragment>
   </duplication>
   <duplication lines="14" tokens="55">
      <file column="9" endcolumn="34" endline="320" line="307"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryAllTracksDataSource.swift"/>
      <file column="9" endcolumn="34" endline="282" line="268"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[        }
    }
    
    @objc func onLogUpdated(_ notification: Notification) {
        guard let updatedTrack = notification.object as? VGTrack else {
            return
        }
        
        DispatchQueue.main.async {
            guard let indexPath = self.getIndexPath(for: updatedTrack) else {
                return
            }
            
            guard let cell = self.parentViewController.tableView.cellForRow(at: indexPath) as? VGLogsTableViewCell else {]]></codefragment>
   </duplication>
   <duplication lines="14" tokens="54">
      <file column="46" endcolumn="52" endline="24" line="11"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Formatters/SpeedFormatter.swift"/>
      <file column="44" endcolumn="52" endline="24" line="11"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Formatters/VGDistanceFormatter.swift"/>
      <codefragment><![CDATA[class VGSpeedFormatter: MeasurementFormatter {
        override init() {
        super.init()
        configure()
    }
    
    required init?(coder: NSCoder) {
        super.init(coder: coder)
        configure()
    }
    
    func configure() {
        self.numberFormatter.maximumFractionDigits = 2
        self.numberFormatter.minimumFractionDigits = 0]]></codefragment>
   </duplication>
   <duplication lines="5" tokens="54">
      <file column="58" endcolumn="88" endline="144" line="140"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryAllTracksDataSource.swift"/>
      <file column="43" endcolumn="88" endline="179" line="175"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryDetailsTableViewController.swift"/>
      <file column="43" endcolumn="88" endline="704" line="700"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[            self.deleteTrack(at: indexPath, in: tableView)
        }
        
        let exportOriginal = UIAction(title: Strings.shareCSV, image: Icons.share, identifier: .none, discoverabilityTitle: nil, attributes: .init(), state: .off) {_ in
            let activityVC = UIActivityViewController(activityItems: [self.vgFileManager.getAbsoluteFilePathFor(track: track)!], applicationActivities: nil)]]></codefragment>
   </duplication>
   <duplication lines="9" tokens="54">
      <file column="52" endcolumn="39" endline="395" line="387"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryAllTracksDataSource.swift"/>
      <file column="65" endcolumn="39" endline="321" line="313"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryDetailsTableViewController.swift"/>
      <file column="65" endcolumn="39" endline="791" line="783"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[        let selectionVC = VGTagsTableViewController(style: .insetGrouped)
        selectionVC.track = track
        
        let navController = UINavigationController(rootViewController: selectionVC)
        navController.modalPresentationStyle = .popover
        navController.preferredContentSize = CGSize(width: 414, height: 600)
        
        let popover: UIPopoverPresentationController = navController.popoverPresentationController!
        popover.sourceView = tappedView]]></codefragment>
   </duplication>
   <duplication lines="13" tokens="53">
      <file column="9" endcolumn="15" endline="113" line="101"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryAllTracksDataSource.swift"/>
      <file column="9" endcolumn="15" endline="662" line="650"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryTableViewController.swift"/>
      <file column="9" endcolumn="15" endline="671" line="659"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[        if tableView.isEditing {
            guard let selectedIndexPaths = tableView.indexPathsForSelectedRows else {
                return
            }
            
            if selectedIndexPaths.count == 0 {
                self.hideEditToolbar()
            } else {
                self.showEditToolbar()
            }
        } else {
            tableView.deselectRow(at: indexPath, animated: true)
            let pulleyEditor = PulleyEditorViewController()]]></codefragment>
   </duplication>
   <duplication lines="10" tokens="52">
      <file column="78" endcolumn="1" endline="36" line="27"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Generators/VGAmbientTemperatureGraphGenerator.swift"/>
      <file column="67" endcolumn="1" endline="36" line="27"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Generators/VGCadenceGraphGenerator.swift"/>
      <codefragment><![CDATA[            configuration.numbersList.append((time, Double(ambientTemperature)))
        }
        configuration.color = UIColor(red: 0.4, green: 0.4, blue: 0.4, alpha: 0.3)
        configuration.startTime = track.timeStart
        configuration.endTime = track.timeStart?.addingTimeInterval(track.duration)

        return configuration

    }
}]]></codefragment>
   </duplication>
   <duplication lines="10" tokens="52">
      <file column="70" endcolumn="1" endline="36" line="27"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Generators/VGEngineLoadGraphGenerator.swift"/>
      <file column="78" endcolumn="1" endline="36" line="27"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Generators/VGHorizontalAccuracyGraphGenerator.swift"/>
      <file column="64" endcolumn="1" endline="36" line="27"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Generators/VGPDOPGraphGenerator.swift"/>
      <codefragment><![CDATA[            configuration.numbersList.append((time, Double(engineLoad)))
        }
        configuration.color = UIColor(red: 0, green: 0.8, blue: 0, alpha: 0.3)
        configuration.startTime = track.timeStart
        configuration.endTime = track.timeStart?.addingTimeInterval(track.duration)

        return configuration

    }
}]]></codefragment>
   </duplication>
   <duplication lines="10" tokens="52">
      <file column="17" endcolumn="42" endline="450" line="441"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryTableViewController.swift"/>
      <file column="17" endcolumn="42" endline="496" line="487"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryTableViewController.swift"/>
      <file column="17" endcolumn="42" endline="542" line="533"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/History/VGHistoryTableViewController.swift"/>
      <codefragment><![CDATA[                result.append(section!)
            }
            
            var summary = section?.summaries.filter({ (summ) -> Bool in
                return summ.summaryID == summaryKey
                }).first
            
            if summary == nil {
                summary = VGTracksSummary(title: summaryKey)
                dateFormatter.dateFormat = "yyyy"]]></codefragment>
   </duplication>
   <duplication lines="5" tokens="52">
      <file column="54" endcolumn="51" endline="167" line="163"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <file column="51" endcolumn="51" endline="184" line="180"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[                                self.dataStore.update(vgTrack: track, onSuccess: { [unowned self] (id) in
                                    track.trackPoints = []
                                    track.mapPoints = []
                                    let downlFile = VGDownloadedFile(name: file.filename, size: file.fileSize as? Int)
                                    self.dataStore.update(file: downlFile, onSuccess: {]]></codefragment>
   </duplication>
   <duplication lines="11" tokens="52">
      <file column="154" endcolumn="9" endline="268" line="258"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <file column="107" endcolumn="13" endline="556" line="547"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Tabs/Logs/ViewControllers/VGLogsTableViewController.swift"/>
      <codefragment><![CDATA[            (self.sections, self.tracksDictionary) = LogDateSplitter.splitLogsByDate(trackList: self.combineLists(localList: list, remoteList: newTracks))

            self.tableView.reloadData()
            if self.tracksDictionary.count > 0 {
                self.emptyLabel.isHidden = true
                self.tableView.separatorStyle = .singleLine
            } else {
                self.emptyLabel.isHidden = false
                self.tableView.separatorStyle = .none
            }
        }]]></codefragment>
   </duplication>
   <duplication lines="10" tokens="51">
      <file column="56" endcolumn="1" endline="37" line="28"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Generators/VGElevationGraphGenerator.swift"/>
      <file column="71" endcolumn="1" endline="36" line="27"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Generators/VGEngineLoadGraphGenerator.swift"/>
      <file column="79" endcolumn="1" endline="36" line="27"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Generators/VGHorizontalAccuracyGraphGenerator.swift"/>
      <file column="65" endcolumn="1" endline="36" line="27"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Generators/VGPDOPGraphGenerator.swift"/>
      <file column="58" endcolumn="1" endline="36" line="27"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Generators/VGPowerGraphGenerator.swift"/>
      <file column="56" endcolumn="1" endline="36" line="27"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Generators/VGRPMGraphGenerator.swift"/>
      <file column="64" endcolumn="1" endline="36" line="27"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/Generators/VGThrottlePositionGraphGenerator.swift"/>
      <codefragment><![CDATA[            configuration.numbersList.append((time, ele))
        }
        configuration.color = UIColor(red: 0, green: 0.8, blue: 0, alpha: 0.3)
        configuration.startTime = track.timeStart
        configuration.endTime = track.timeStart?.addingTimeInterval(track.duration)

        return configuration

    }
}]]></codefragment>
   </duplication>
   <duplication lines="6" tokens="51">
      <file column="35" endcolumn="21" endline="558" line="553"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/VGDataStore.swift"/>
      <file column="27" endcolumn="21" endline="753" line="748"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/VGDataStore.swift"/>
      <codefragment><![CDATA[    func add(vehicleWith vehicleId: UUID, toTrackWith trackId: UUID, onSuccess: @escaping() -> Void, onFailure:@escaping(Error) -> Void) {
        let context = NSManagedObjectContext(concurrencyType: .privateQueueConcurrencyType)
        context.persistentStoreCoordinator = self.storeCoordinator
        context.perform {
            // Get the track in question
            guard let vehicle = self.getVehicle(in: context, with: vehicleId) else {]]></codefragment>
   </duplication>
   <duplication lines="5" tokens="50">
      <file column="30" endcolumn="78" endline="201" line="197"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/VGFileManager.swift"/>
      <file column="31" endcolumn="78" endline="392" line="388"
            path="/Users/bergthor/Dropbox/Forritun/Swift/VehicleGPS/VehicleGPS/Shared Entities/VGFileManager.swift"/>
      <codefragment><![CDATA[        var result = [VGTrack]()
        let docUrl = fileManager.urls(for: .documentDirectory, in: .userDomainMask).first
        let logPath = docUrl?.appendingPathComponent(LOG_DIRECTORY).path
        do {
            fileList = try fileManager.contentsOfDirectory(atPath: (logPath)!)]]></codefragment>
   </duplication>
</pmd-cpd>